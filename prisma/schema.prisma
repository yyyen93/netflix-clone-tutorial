// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// [1] Our models
//Question: Why need to write all the models right now and why we need them?
//Reason: Because Modifying Prisma models and pushing them to database and modifying them again as we need might cause some trouble in this tutorial.
//This will be your realistic workflow while you're developing
// [2] First thing to define in every model that mongoDB has is an ID. There are many ways to write ID. In this case, we have to write it using Prisma and mongoDB combination because mongodb uses a special type of ID called 'ObjectId'.
// @id @default(auto()) @map("_id") @db.ObjectId means that it is using the proper object ID, type that mongodb uses in this Prisma orm. We have to write this in every model. 
model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  //Make sure image add ? because it is optional, otherwise it will crash.
  image String?  
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  //Everytime create a user model, we need put the default value.
  createdAt DateTime @default(now()) 
  //Cool features '@updateAt' from Prisma which it will update when we modify the user.
  updateAt DateTime @updatedAt
  //List of favorite movies array id
  favoriteIds String[] @db.ObjectId
  session Session[]
  accounts Account[]
}

//[3] This model will be created once we use our Google account or Github Account. We need all of them, otherwise it not going to work
model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // A relation between accounts and user ID
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int? //Int kind of value easier made for calculation or something
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  // create a relation between User and Account manually.
  // Connecting between User model and Account Model using the field called userId which is going to reference to User model id.
  //onDelete just a method we are describing what we want to happen once this User is deleted and what do we want to happen to this Account model. This is the function does.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// [4]
model Session{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}

// [5]
model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String @unique
  token String @unique
  expires DateTime
  @@unique([identifier, token])
}

// [6]
model Movie{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String 
}